{"version":3,"file":"component---src-pages-intermediates-specular-mapping-js-a38f1f96e4e7cb88eb68.js","mappings":"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","sources":["webpack://shader-tutorial/./src/images/intermediates/specular.png","webpack://shader-tutorial/./src/components/intermediates/specular-mapping/first-example-shaders.js","webpack://shader-tutorial/./src/components/intermediates/specular-mapping/first-example/vertex.glsl","webpack://shader-tutorial/./src/components/intermediates/specular-mapping/first-example/fragment.glsl","webpack://shader-tutorial/./src/components/intermediates/specular-mapping/first-example.js","webpack://shader-tutorial/./src/pages/intermediates/specular-mapping.js","webpack://shader-tutorial/./src/images/intermediates/normal.png","webpack://shader-tutorial/./src/images/intermediates/texture-2.png"],"sourcesContent":["export default __webpack_public_path__ + \"static/specular-0e60e34393edfda92e3563725afa6445.png\";","import fragmentShader from \"!raw-loader!./first-example/fragment.glsl\";\nimport vertexShader from \"!raw-loader!./first-example/vertex.glsl\";\n\nexport const firstVertexShaderSource = vertexShader;\nexport const firstFragmentShaderSource = fragmentShader;\n","export default \"attribute vec4 vertexPosition;\\nattribute vec2 vertexUv;\\nattribute vec3 vertexNormal;\\nattribute vec3 vertexTangent;\\nattribute vec3 vertexBiTangent;\\n\\nuniform mat4 modelMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat4 projectionMatrix;\\n\\nvarying highp vec2 uv;\\nvarying highp mat3 tbnMatrix_viewSpace;\\nvarying highp vec4 fragmentPosition_viewSpace;\\n\\nvoid main() {\\n  highp vec4 vertexPosition_worldSpace = modelMatrix * vertexPosition;\\n  highp vec4 vertexPosition_viewSpace = viewMatrix * vertexPosition_worldSpace;\\n  gl_Position = projectionMatrix * vertexPosition_viewSpace;\\n\\n  fragmentPosition_viewSpace = vertexPosition_viewSpace;\\n  uv = vertexUv;\\n\\n  highp mat3 modelViewMatrix_3x3 = mat3(viewMatrix * modelMatrix);\\n  highp vec3 vertexTangent = normalize(vertexTangent);\\n  highp vec3 vertexBiTangent = normalize(vertexBiTangent);\\n  highp vec3 vertexNormal = normalize(vertexNormal);\\n\\n  tbnMatrix_viewSpace = modelViewMatrix_3x3 * mat3(\\n    vertexTangent,\\n    vertexBiTangent,\\n    vertexNormal\\n  );\\n}\";","export default \"varying highp vec2 uv;\\nvarying highp mat3 tbnMatrix_viewSpace;\\nvarying highp vec4 fragmentPosition_viewSpace;\\n\\nuniform highp mat4 viewMatrix;\\nuniform highp vec4 lightPosition_worldSpace;\\n\\nuniform highp vec3 lightColor;\\nuniform highp float lightIntensity;\\n\\nuniform highp float specularLobeFactor;\\n\\nuniform sampler2D diffuseTextureSampler;\\nuniform sampler2D normalTextureSampler;\\nuniform sampler2D specularTextureSampler;\\n\\nvoid main() {\\n  highp vec4 diffuseColor = texture2D(diffuseTextureSampler, uv);\\n  highp vec4 normalColor = texture2D(normalTextureSampler, uv);\\n  highp vec4 specularColor = texture2D(specularTextureSampler, uv);\\n\\n  highp vec3 normal_viewSpace = tbnMatrix_viewSpace * normalize((normalColor.xyz * 2.0) - 1.0);\\n\\n  highp vec4 lightPosition_viewSpace = viewMatrix * lightPosition_worldSpace;\\n  highp vec3 lightDirection_viewSpace = normalize((lightPosition_viewSpace - fragmentPosition_viewSpace).xyz);\\n  highp vec3 viewDirection_viewSpace = normalize(fragmentPosition_viewSpace.xyz - vec3(0.0, 0.0, 0.0));\\n\\n  highp vec3 lightColorIntensity = lightColor * lightIntensity;\\n  highp float distanceFromLight = distance(fragmentPosition_viewSpace, lightPosition_viewSpace);\\n\\n  highp float diffuseStrength = clamp(dot(normal_viewSpace, lightDirection_viewSpace), 0.0, 1.0);\\n  highp vec3 diffuseLight = (lightColorIntensity * diffuseStrength) / (distanceFromLight * distanceFromLight);\\n\\n  highp vec3 lightReflection_viewSpace = reflect(lightDirection_viewSpace, normal_viewSpace);\\n\\n  highp float specularStrength = clamp(dot(viewDirection_viewSpace, lightReflection_viewSpace), 0.0, 1.0);\\n  highp vec3 specularLight = (lightColorIntensity * pow(specularStrength, specularLobeFactor)) / (distanceFromLight * distanceFromLight);\\n\\n  gl_FragColor.rgb = (diffuseColor.rgb * diffuseLight) + (specularColor.rgb * specularLight);\\n  gl_FragColor.a = diffuseColor.a;\\n}\";","import { mat4, vec2, vec3, vec4 } from \"gl-matrix\"\nimport React, { useEffect, useRef, useState } from \"react\"\n\nimport normalTexture from \"../../../images/intermediates/normal.png\"\nimport specularTexture from \"../../../images/intermediates/specular.png\"\nimport texture from \"../../../images/intermediates/texture-2.png\"\nimport { coordArrToString, runOnPredicate } from \"../../util\"\nimport wrapExample from \"../../webgl-example-view\"\nimport WebGlWrapper from \"../../webgl-wrapper\"\nimport { firstFragmentShaderSource, firstVertexShaderSource } from \"./first-example-shaders\"\n\nconst shaderProgramInfo = {\n  vertex: {\n    attributeLocations: {\n      vertexPosition: \"vec4\",\n      vertexUv: \"vec2\",\n      vertexNormal: \"vec3\",\n      vertexTangent: \"vec3\",\n      vertexBiTangent: \"vec3\",\n    },\n    uniformLocations: {\n      modelMatrix: \"mat4\",\n      viewMatrix: \"mat4\",\n      projectionMatrix: \"mat4\",\n\n      lightPosition_worldSpace: \"vec4\",\n      lightColor: \"vec3\",\n      lightIntensity: \"float\",\n      specularLobeFactor: \"float\",\n    },\n  },\n  fragment: {\n    attributeLocations: {},\n    uniformLocations: {\n      diffuseTextureSampler: \"sampler2D\",\n      normalTextureSampler: \"sampler2D\",\n      specularTextureSampler: \"sampler2D\",\n    },\n  },\n};\n\nconst lightModelPosition = vec4.fromValues(4.0, 0.0, 4.0, 1.0);\nconst lightColor = vec3.fromValues(1.0, 1.0, 1.0);\nconst lightIntensity = 50.0;\n\nconst squareModelPosition = mat4.create();\n\nconst SpecularMappingFirstExample = () => {\n  const square = {\n    vertices: [\n      [-1.0, -1.0, 0.0],\n      [-1.0, 1.0, 0.0],\n      [1.0, -1.0, 0.0],\n      [-1.0, 1.0, 0.0],\n      [1.0, -1.0, 0.0],\n      [1.0, 1.0, 0.0],\n    ],\n    uvs: [\n      [0.0, 1.0],\n      [0.0, 0.0],\n      [1.0, 1.0],\n      [0.0, 0.0],\n      [1.0, 1.0],\n      [1.0, 0.0],\n    ],\n    normals: [\n      [0.0, 0.0, 1.0],\n      [0.0, 0.0, 1.0],\n      [0.0, 0.0, 1.0],\n      [0.0, 0.0, 1.0],\n      [0.0, 0.0, 1.0],\n      [0.0, 0.0, 1.0],\n    ],\n    tangents: [],\n    biTangents: [],\n    indices: [[0, 1, 2, 3, 4, 5]],\n    texture: texture,\n    normalTexture: normalTexture,\n    specularTexture: specularTexture,\n    specularLobeFactor: 5.0,\n  };\n  for (let i = 0; i < square.vertices.length; i += 3) {\n    const v0 = vec3.clone(square.vertices[i + 0]);\n    const v1 = vec3.clone(square.vertices[i + 1]);\n    const v2 = vec3.clone(square.vertices[i + 2]);\n\n    const uv0 = vec2.clone(square.uvs[i + 0]);\n    const uv1 = vec2.clone(square.uvs[i + 1]);\n    const uv2 = vec2.clone(square.uvs[i + 2]);\n\n    const deltaPos1 = vec3.subtract(vec3.create(), v1, v0);\n    const deltaPos2 = vec3.subtract(vec3.create(), v2, v0);\n\n    const deltaUv1 = vec2.subtract(vec2.create(), uv1, uv0);\n    const deltaUv2 = vec2.subtract(vec2.create(), uv2, uv0);\n\n    const r = 1.0 / (deltaUv1[0] * deltaUv2[1] - deltaUv1[1] * deltaUv2[0]);\n    const tangent = Array.from(\n      vec3.multiply(\n        vec3.create(),\n        vec3.subtract(\n          vec3.create(),\n          vec3.multiply(vec3.create(), deltaPos1, [\n            deltaUv2[1],\n            deltaUv2[1],\n            deltaUv2[1],\n          ]),\n          vec3.multiply(vec3.create(), deltaPos2, [\n            deltaUv1[1],\n            deltaUv1[1],\n            deltaUv1[1],\n          ]),\n        ),\n        [r, r, r],\n      ),\n    );\n    const biTangent = Array.from(\n      vec3.multiply(\n        vec3.create(),\n        vec3.subtract(\n          vec3.create(),\n          vec3.multiply(vec3.create(), deltaPos2, [\n            deltaUv1[0],\n            deltaUv1[0],\n            deltaUv1[0],\n          ]),\n          vec3.multiply(vec3.create(), deltaPos1, [\n            deltaUv2[0],\n            deltaUv2[0],\n            deltaUv2[0],\n          ]),\n        ),\n        [r, r, r],\n      ),\n    );\n\n    square.tangents.push(tangent, tangent, tangent);\n    square.biTangents.push(biTangent, biTangent, biTangent);\n  }\n  const [webGlRef, updateWebGlRef] = useState(null);\n  const [shaderProgram, updateShaderProgram] = useState(null);\n  const [shaderInfo, updateShaderInfo] = useState(null);\n  const [squareBuffer, updatesquareBuffer] = useState({\n    vertices: null,\n    uvs: null,\n    normals: null,\n    tangents: null,\n    biTangents: null,\n    indices: null,\n    texture: null,\n    normalTexture: null,\n    specularTexture: null,\n  });\n\n  const canvasRef = useRef();\n  useEffect(() => {\n    if (canvasRef.current !== null) {\n      const newWebGlRef = new WebGlWrapper(\n        canvasRef.current,\n        squareModelPosition,\n      );\n      updateWebGlRef(newWebGlRef);\n\n      return () => {\n        updateWebGlRef(null);\n        newWebGlRef.destroy();\n      };\n    }\n  }, [canvasRef]);\n\n  useEffect(\n    runOnPredicate(webGlRef !== null, () => {\n      updateShaderProgram(\n        webGlRef.createShaderProgram(\n          firstVertexShaderSource,\n          firstFragmentShaderSource,\n        ),\n      );\n    }),\n    [webGlRef],\n  );\n\n  useEffect(\n    runOnPredicate(shaderProgram !== null, () => {\n      updateShaderInfo(\n        webGlRef.getDataLocations(shaderProgram, shaderProgramInfo),\n      );\n    }),\n    [shaderProgram],\n  );\n\n  useEffect(\n    runOnPredicate(shaderInfo !== null, () => {\n      updatesquareBuffer({\n        vertices: webGlRef.createStaticDrawArrayBuffer(\n          square.vertices.flat(),\n          squareBuffer.vertices,\n        ),\n        uvs: webGlRef.createStaticDrawArrayBuffer(\n          square.uvs.flat(),\n          squareBuffer.uvs,\n        ),\n        normals: webGlRef.createStaticDrawArrayBuffer(\n          square.normals.flat(),\n          squareBuffer.normals,\n        ),\n        tangents: webGlRef.createStaticDrawArrayBuffer(\n          square.tangents.flat(),\n          squareBuffer.tangents,\n        ),\n        biTangents: webGlRef.createStaticDrawArrayBuffer(\n          square.biTangents.flat(),\n          squareBuffer.biTangents,\n        ),\n        indices: webGlRef.createElementArrayBuffer(\n          square.indices.flat(),\n          squareBuffer.indices,\n        ),\n        texture: webGlRef.createImageTexture(\n          square.texture,\n          squareBuffer.texture,\n        ),\n        normalTexture: webGlRef.createImageTexture(\n          square.normalTexture,\n          squareBuffer.normalTexture,\n        ),\n        specularTexture: webGlRef.createImageTexture(\n          square.specularTexture,\n          squareBuffer.specularTexture,\n        ),\n      });\n    }),\n    [shaderInfo],\n  );\n\n  useEffect(\n    runOnPredicate(squareBuffer.vertices !== null, () => {\n      let shouldRender = true;\n\n      const renderScene = () => {\n        webGlRef.renderScene(\n          ({ gl, projectionMatrix, viewMatrix, modelMatrix }) => {\n            if (!shouldRender) {\n              return;\n            }\n\n            const rotatedModelMatrix = mat4.create();\n            const rotationAngle = (30 * Math.PI) / 180;\n            mat4.translate(rotatedModelMatrix, modelMatrix, [0.0, 0.0, 2.0]);\n            mat4.rotateY(rotatedModelMatrix, rotatedModelMatrix, rotationAngle);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, squareBuffer.vertices);\n            gl.vertexAttribPointer(\n              shaderInfo.vertex.attributeLocations.vertexPosition,\n              3,\n              gl.FLOAT,\n              false,\n              0,\n              0,\n            );\n            gl.enableVertexAttribArray(\n              shaderInfo.vertex.attributeLocations.vertexPosition,\n            );\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, squareBuffer.uvs);\n            gl.vertexAttribPointer(\n              shaderInfo.vertex.attributeLocations.vertexUv,\n              2,\n              gl.FLOAT,\n              false,\n              0,\n              0,\n            );\n            gl.enableVertexAttribArray(\n              shaderInfo.vertex.attributeLocations.vertexUv,\n            );\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, squareBuffer.normals);\n            gl.vertexAttribPointer(\n              shaderInfo.vertex.attributeLocations.vertexNormal,\n              3,\n              gl.FLOAT,\n              false,\n              0,\n              0,\n            );\n            gl.enableVertexAttribArray(\n              shaderInfo.vertex.attributeLocations.vertexNormal,\n            );\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, squareBuffer.tangents);\n            gl.vertexAttribPointer(\n              shaderInfo.vertex.attributeLocations.vertexTangent,\n              3,\n              gl.FLOAT,\n              false,\n              0,\n              0,\n            );\n            gl.enableVertexAttribArray(\n              shaderInfo.vertex.attributeLocations.vertexTangent,\n            );\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, squareBuffer.biTangents);\n            gl.vertexAttribPointer(\n              shaderInfo.vertex.attributeLocations.vertexBiTangent,\n              3,\n              gl.FLOAT,\n              false,\n              0,\n              0,\n            );\n            gl.enableVertexAttribArray(\n              shaderInfo.vertex.attributeLocations.vertexBiTangent,\n            );\n\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, squareBuffer.indices);\n\n            gl.useProgram(shaderProgram);\n\n            gl.uniformMatrix4fv(\n              shaderInfo.vertex.uniformLocations.projectionMatrix,\n              false,\n              projectionMatrix,\n            );\n            gl.uniformMatrix4fv(\n              shaderInfo.vertex.uniformLocations.viewMatrix,\n              false,\n              viewMatrix,\n            );\n            gl.uniformMatrix4fv(\n              shaderInfo.vertex.uniformLocations.modelMatrix,\n              false,\n              rotatedModelMatrix,\n            );\n\n            gl.uniform4fv(\n              shaderInfo.vertex.uniformLocations.lightPosition_worldSpace,\n              lightModelPosition,\n            );\n            gl.uniform3fv(\n              shaderInfo.vertex.uniformLocations.lightColor,\n              lightColor,\n            );\n            gl.uniform1f(\n              shaderInfo.vertex.uniformLocations.lightIntensity,\n              lightIntensity,\n            );\n            gl.uniform1f(\n              shaderInfo.vertex.uniformLocations.specularLobeFactor,\n              square.specularLobeFactor,\n            );\n\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, squareBuffer.texture);\n            gl.uniform1i(\n              shaderInfo.fragment.uniformLocations.diffuseTextureSampler,\n              0,\n            );\n\n            gl.activeTexture(gl.TEXTURE1);\n            gl.bindTexture(gl.TEXTURE_2D, squareBuffer.normalTexture);\n            gl.uniform1i(\n              shaderInfo.fragment.uniformLocations.normalTextureSampler,\n              1,\n            );\n\n            gl.activeTexture(gl.TEXTURE2);\n            gl.bindTexture(gl.TEXTURE_2D, squareBuffer.specularTexture);\n            gl.uniform1i(\n              shaderInfo.fragment.uniformLocations.specularTextureSampler,\n              2,\n            );\n\n            gl.drawElements(\n              gl.TRIANGLES,\n              square.indices.length * square.indices[0].length,\n              gl.UNSIGNED_SHORT,\n              0,\n            );\n\n            requestAnimationFrame(renderScene);\n          },\n        );\n      };\n      requestAnimationFrame(renderScene);\n\n      return () => {\n        shouldRender = false;\n      };\n    }),\n    [squareBuffer],\n  );\n\n  const colorCoords = { x: \"r\", y: \"g\", z: \"b\" };\n\n  return (\n    <div className=\"util text-center\" style={{ padding: \"1rem\" }}>\n      <canvas width=\"640\" height=\"480\" ref={canvasRef}>\n        Cannot run WebGL examples (not supported)\n      </canvas>\n      <pre className=\"util text-left\">\n        {`\nSquare:\n    World Position: ${coordArrToString([0.0, 0.0, 0.0])}\n    Lighting:\n        Lobe Density: ${square.specularLobeFactor}\n`.trim()}\n      </pre>\n      <pre className=\"util text-left\">\n        {`\nLight:\n    World Position: ${coordArrToString(lightModelPosition)}\n    Color: ${coordArrToString(lightColor, colorCoords)}\n    Intensity: ${lightIntensity}\n`.trim()}\n      </pre>\n    </div>\n  );\n};\n\nexport default wrapExample(SpecularMappingFirstExample);\n","import { Link } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\nimport Content from \"../../components/content\";\nimport GlslCodeHighlight from \"../../components/glsl-code-highlight\";\nimport Heading from \"../../components/heading\";\nimport SpecularMappingFirstExample from \"../../components/intermediates/specular-mapping/first-example\";\nimport {\n  firstFragmentShaderSource,\n  firstVertexShaderSource,\n} from \"../../components/intermediates/specular-mapping/first-example-shaders\";\nimport Layout from \"../../components/layout\";\nimport PageChange from \"../../components/page-change\";\nimport Seo from \"../../components/seo\";\n\nconst SpecularMappingPage = ({ location: { pathname } }) => (\n  <Layout>\n    <Seo\n      pathname={pathname}\n      title=\"Shader Intermediates - Specular Mapping\"\n      description=\"A look into the how specular map textures are used to enhance specular lighting detail to objects.\"\n      keywords={[\"specular\", \"mapping\", \"texturing\", \"shader\", \"intermediates\"]}\n    />\n    <Content>\n      <h1>Shader Intermediates - Specular Mapping</h1>\n      <p>\n        Similar to how we've stored information the normal information of a\n        surface in a map (as taught in the{\" \"}\n        <Link to=\"/intermediates/normal-mapping\">normal mapping chapter</Link>),\n        we can also store specular information of a surface in a map as well.\n        Such a map is called a specular map.\n      </p>\n      <Heading type=\"h2\">Specular Maps</Heading>\n      <p>\n        Like the texture maps used in the{\" \"}\n        <Link to=\"/intermediates/normal-mapping\">normal mapping chapter</Link>,\n        the texture maps that will be used to color and light the wall are:\n      </p>\n      <div className=\"image util text-center\">\n        <StaticImage\n          src=\"../../images/intermediates/texture-2.png\"\n          alt=\"Stone Wall - Diffuse Map\"\n          style={{ maxWidth: \"65%\" }}\n        />\n        <br />\n        Diffuse map\n        <br />\n        <a\n          href=\"https://www.opengl-tutorial.org/intermediate-tutorials/tutorial-13-normal-mapping/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Source\n        </a>\n      </div>\n      <div className=\"image util text-center\">\n        <StaticImage\n          src=\"../../images/intermediates/normal.png\"\n          alt=\"Stone Wall - Normal Map\"\n          style={{ maxWidth: \"65%\" }}\n        />\n        <br />\n        Normal map\n        <br />\n        <a\n          href=\"https://www.opengl-tutorial.org/intermediate-tutorials/tutorial-13-normal-mapping/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Source\n        </a>\n      </div>\n      <div className=\"image util text-center\">\n        <StaticImage\n          src=\"../../images/intermediates/specular.png\"\n          alt=\"Stone Wall - Specular Map\"\n          style={{ maxWidth: \"65%\" }}\n        />\n        <br />\n        Specular map\n        <br />\n        <a\n          href=\"https://www.opengl-tutorial.org/intermediate-tutorials/tutorial-13-normal-mapping/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Source\n        </a>\n      </div>\n      <p>\n        The specular map is an RGB image that contains the following information\n        per pixel:\n      </p>\n      <ul>\n        <li>\n          The color value of a pixel describes what is the color of the specular\n          highlight that is reflected from that point. Since the surface of the\n          object can absorb part of the light and reflect the rest of it, this\n          can change the specular reflection color and brightness.\n        </li>\n        <li>\n          The brightness of the color maps into the specular reflectivity of the\n          surface at that point. This means the brighter the color of the pixel,\n          the smoother the surface is at that point and the more light it\n          reflects.\n        </li>\n      </ul>\n      <p>\n        Let's look at the stone wall example with the specular map added in.\n        We'll be performing the lighting calculation in view-space.\n      </p>\n      <Heading type=\"h2\">Example - Stone wall</Heading>\n      <SpecularMappingFirstExample />\n      <GlslCodeHighlight\n        code={firstVertexShaderSource.trim()}\n        type={\"Vertex\"}\n      />\n      <GlslCodeHighlight\n        code={firstFragmentShaderSource.trim()}\n        type={\"Fragment\"}\n      />\n      <p>\n        At line 20, we grab the specular color value from the specular map, and\n        use that as the specular highlight color + reflectivity value for the\n        specular lighting component.\n      </p>\n      <p>\n        Since the colors stored in the specular map are in RGB (with range 0 -\n        255, 0.0 - 1.0 in GLSL), the color value tells us what is the color of\n        the specular highlight that is being reflected, and the brightness of\n        the color tells us how much light is reflected.\n      </p>\n      <p>\n        As a result, the specular color retrieved from the map can be used as\n        and multiplied against the specular lighting vector to give us the final\n        specular lighting value for the fragment.\n      </p>\n      <Heading type=\"h2\">Summary</Heading>\n      <ul>\n        <li>\n          Similar to normal mapping, specular mapping can be used to map\n          specular highlight color and reflectivity to fragments inside a\n          polygon to make a surface look more reflective and smooth.\n        </li>\n        <li>\n          Specular maps add the appearence of smoothness on the surface of\n          objects, allowing for the surface to reflect more light directly,\n          increasing the specular lighting of the surface.\n        </li>\n        <li>\n          The specular highlight color and reflectivity of each point are stored\n          in the image as a RGB color value.\n        </li>\n        <li>\n          The color values representing the specular highlight color and\n          reflectivity for each fragment are retrieved from the texture and used\n          as is, since the colors are in RGB and can be used directly to\n          calculate how much specular light is actually reflected and the color\n          of that light.\n        </li>\n      </ul>\n    </Content>\n    <PageChange previous=\"/intermediates/normal-mapping/\" />\n  </Layout>\n);\n\nexport default SpecularMappingPage;\n","export default __webpack_public_path__ + \"static/normal-3d370ff1c6790eee68b4a59f5ccdc8b9.png\";","export default __webpack_public_path__ + \"static/texture-2-c11990d4afdf5ed2f0fb3c44636bccd1.png\";"],"names":["firstVertexShaderSource","firstFragmentShaderSource","shaderProgramInfo","vertex","attributeLocations","vertexPosition","vertexUv","vertexNormal","vertexTangent","vertexBiTangent","uniformLocations","modelMatrix","viewMatrix","projectionMatrix","lightPosition_worldSpace","lightColor","lightIntensity","specularLobeFactor","fragment","diffuseTextureSampler","normalTextureSampler","specularTextureSampler","lightModelPosition","vec4","vec3","squareModelPosition","mat4","wrapExample","SpecularMappingFirstExample","square","vertices","uvs","normals","tangents","biTangents","indices","texture","normalTexture","specularTexture","i","length","v0","v1","v2","uv0","vec2","uv1","uv2","deltaPos1","deltaPos2","deltaUv1","deltaUv2","r","tangent","Array","from","biTangent","push","webGlRef","updateWebGlRef","useState","shaderProgram","updateShaderProgram","shaderInfo","updateShaderInfo","squareBuffer","updatesquareBuffer","canvasRef","useRef","useEffect","current","newWebGlRef","WebGlWrapper","destroy","runOnPredicate","createShaderProgram","getDataLocations","createStaticDrawArrayBuffer","flat","createElementArrayBuffer","createImageTexture","shouldRender","renderScene","_ref","gl","rotatedModelMatrix","rotationAngle","Math","PI","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","enableVertexAttribArray","ELEMENT_ARRAY_BUFFER","useProgram","uniformMatrix4fv","uniform4fv","uniform3fv","uniform1f","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","uniform1i","TEXTURE1","TEXTURE2","drawElements","TRIANGLES","UNSIGNED_SHORT","requestAnimationFrame","React","className","style","padding","width","height","ref","coordArrToString","trim","x","y","z","location","pathname","Layout","Seo","title","description","keywords","Content","Link","to","Heading","type","StaticImage","src","alt","maxWidth","__imageData","require","href","target","rel","GlslCodeHighlight","code","PageChange","previous"],"sourceRoot":""}