{"version":3,"file":"component---src-pages-advanced-color-banding-dithering-js-d7c3d60724228fa601b3.js","mappings":"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","sources":["webpack://shader-tutorial/./src/components/advanced/color-banding-dithering/common/vertex.glsl","webpack://shader-tutorial/./src/components/advanced/color-banding-dithering/banding-example-shaders.js","webpack://shader-tutorial/./src/components/advanced/color-banding-dithering/banding-example/fragment.glsl","webpack://shader-tutorial/./src/components/advanced/color-banding-dithering/banding-example.js","webpack://shader-tutorial/./src/components/advanced/color-banding-dithering/dithering-example-shaders.js","webpack://shader-tutorial/./src/components/advanced/color-banding-dithering/dithering-example/fragment.glsl","webpack://shader-tutorial/./src/components/advanced/color-banding-dithering/dithering-example.js","webpack://shader-tutorial/./src/pages/advanced/color-banding-dithering.js"],"sourcesContent":["export default \"attribute vec4 vertexPosition;\\n\\nvoid main() {\\n  gl_Position = vertexPosition;\\n}\";","import fragmentShader from \"!raw-loader!./banding-example/fragment.glsl\";\nimport vertexShader from \"!raw-loader!./common/vertex.glsl\";\n\nexport const bandingVertexShaderSource = vertexShader;\nexport const bandingFragmentShaderSource = fragmentShader;\n","export default \"uniform highp vec2 resolution;\\n\\nvoid main() {\\n  highp vec2 coordinates = gl_FragCoord.xy / resolution;\\n\\n  highp float fragmentColor = mix(0.05, 0.35, 1.0 - coordinates.y);\\n  gl_FragColor = vec4(vec3(fragmentColor), 1.0);\\n}\";","import { mat4 } from \"gl-matrix\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { runOnPredicate } from \"../../util\";\nimport wrapExample from \"../../webgl-example-view\";\nimport WebGlWrapper from \"../../webgl-wrapper\";\nimport {\n  bandingFragmentShaderSource,\n  bandingVertexShaderSource,\n} from \"./banding-example-shaders\";\n\nconst shaderProgramInfo = {\n  vertex: {\n    attributeLocations: {\n      vertexPosition: \"vec4\",\n    },\n    uniformLocations: {},\n  },\n  fragment: {\n    attributeLocations: {},\n    uniformLocations: {\n      resolution: \"vec2\",\n    },\n  },\n};\n\nconst screenModelPosition = mat4.create();\n\nconst BandingExample = () => {\n  const screen = {\n    vertices: [\n      [-1.0, -1.0, 0.0],\n      [-1.0, 1.0, 0.0],\n      [1.0, -1.0, 0.0],\n      [1.0, 1.0, 0.0],\n    ],\n  };\n  const [webGlRef, updateWebGlRef] = useState(null);\n  const [shaderProgram, updateShaderProgram] = useState(null);\n  const [shaderInfo, updateShaderInfo] = useState(null);\n  const [screenBuffer, updateScreenBuffer] = useState({ vertices: null });\n\n  const canvasRef = useRef();\n  useEffect(() => {\n    if (canvasRef.current !== null) {\n      const newWebGlRef = new WebGlWrapper(\n        canvasRef.current,\n        screenModelPosition,\n      );\n      updateWebGlRef(newWebGlRef);\n\n      return () => {\n        updateWebGlRef(null);\n        newWebGlRef.destroy();\n      };\n    }\n  }, [canvasRef]);\n\n  useEffect(\n    runOnPredicate(webGlRef !== null, () => {\n      updateShaderProgram(\n        webGlRef.createShaderProgram(\n          bandingVertexShaderSource,\n          bandingFragmentShaderSource,\n        ),\n      );\n    }),\n    [webGlRef],\n  );\n\n  useEffect(\n    runOnPredicate(shaderProgram !== null, () => {\n      updateShaderInfo(\n        webGlRef.getDataLocations(shaderProgram, shaderProgramInfo),\n      );\n    }),\n    [shaderProgram],\n  );\n\n  useEffect(\n    runOnPredicate(shaderInfo !== null, () => {\n      updateScreenBuffer({\n        vertices: webGlRef.createStaticDrawArrayBuffer(\n          screen.vertices.flat(),\n          screenBuffer.vertices,\n        ),\n      });\n    }),\n    [shaderInfo],\n  );\n\n  useEffect(\n    runOnPredicate(screenBuffer.vertices !== null, () => {\n      let shouldRender = true;\n\n      const renderScene = () => {\n        webGlRef.renderScene(({ gl, resolution }) => {\n          if (!shouldRender) {\n            return;\n          }\n\n          gl.bindBuffer(gl.ARRAY_BUFFER, screenBuffer.vertices);\n          gl.vertexAttribPointer(\n            shaderInfo.vertex.attributeLocations.vertexPosition,\n            3,\n            gl.FLOAT,\n            false,\n            0,\n            0,\n          );\n          gl.enableVertexAttribArray(\n            shaderInfo.vertex.attributeLocations.vertexPosition,\n          );\n\n          gl.useProgram(shaderProgram);\n\n          gl.uniform2fv(\n            shaderInfo.fragment.uniformLocations.resolution,\n            resolution,\n          );\n\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, screen.vertices.length);\n\n          requestAnimationFrame(renderScene);\n        });\n      };\n      requestAnimationFrame(renderScene);\n\n      return () => {\n        shouldRender = false;\n      };\n    }),\n    [screenBuffer],\n  );\n\n  return (\n    <div className=\"util text-center\" style={{ padding: \"1rem\" }}>\n      <canvas width=\"640\" height=\"480\" ref={canvasRef}>\n        Cannot run WebGL examples (not supported)\n      </canvas>\n    </div>\n  );\n};\n\nexport default wrapExample(BandingExample);\n","import vertexShader from \"!raw-loader!./common/vertex.glsl\";\nimport fragmentShader from \"!raw-loader!./dithering-example/fragment.glsl\";\n\nexport const ditheringVertexShaderSource = vertexShader;\nexport const ditheringFragmentShaderSource = fragmentShader;\n","export default \"uniform highp vec2 resolution;\\n\\nconst highp float NOISE_GRANULARITY = 0.5/255.0;\\n\\nhighp float random(highp vec2 coords) {\\n   return fract(sin(dot(coords.xy, vec2(12.9898,78.233))) * 43758.5453);\\n}\\n\\nvoid main() {\\n  highp vec2 coordinates = gl_FragCoord.xy / resolution;\\n\\n  highp float fragmentColor = mix(0.05, 0.35, 1.0 - coordinates.y);\\n  fragmentColor += mix(-NOISE_GRANULARITY, NOISE_GRANULARITY, random(coordinates));\\n  gl_FragColor = vec4(vec3(fragmentColor), 1.0);\\n}\";","import { mat4 } from \"gl-matrix\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport { runOnPredicate } from \"../../util\";\nimport wrapExample from \"../../webgl-example-view\";\nimport WebGlWrapper from \"../../webgl-wrapper\";\nimport {\n  ditheringFragmentShaderSource,\n  ditheringVertexShaderSource,\n} from \"./dithering-example-shaders\";\n\nconst shaderProgramInfo = {\n  vertex: {\n    attributeLocations: {\n      vertexPosition: \"vec4\",\n    },\n    uniformLocations: {},\n  },\n  fragment: {\n    attributeLocations: {},\n    uniformLocations: {\n      resolution: \"vec2\",\n    },\n  },\n};\n\nconst screenModelPosition = mat4.create();\n\nconst DitheringExample = () => {\n  const screen = {\n    vertices: [\n      [-1.0, -1.0, 0.0],\n      [-1.0, 1.0, 0.0],\n      [1.0, -1.0, 0.0],\n      [1.0, 1.0, 0.0],\n    ],\n  };\n  const [webGlRef, updateWebGlRef] = useState(null);\n  const [shaderProgram, updateShaderProgram] = useState(null);\n  const [shaderInfo, updateShaderInfo] = useState(null);\n  const [screenBuffer, updateScreenBuffer] = useState({ vertices: null });\n\n  const canvasRef = useRef();\n  useEffect(() => {\n    if (canvasRef.current !== null) {\n      const newWebGlRef = new WebGlWrapper(\n        canvasRef.current,\n        screenModelPosition,\n      );\n      updateWebGlRef(newWebGlRef);\n\n      return () => {\n        updateWebGlRef(null);\n        newWebGlRef.destroy();\n      };\n    }\n  }, [canvasRef]);\n\n  useEffect(\n    runOnPredicate(webGlRef !== null, () => {\n      updateShaderProgram(\n        webGlRef.createShaderProgram(\n          ditheringVertexShaderSource,\n          ditheringFragmentShaderSource,\n        ),\n      );\n    }),\n    [webGlRef],\n  );\n\n  useEffect(\n    runOnPredicate(shaderProgram !== null, () => {\n      updateShaderInfo(\n        webGlRef.getDataLocations(shaderProgram, shaderProgramInfo),\n      );\n    }),\n    [shaderProgram],\n  );\n\n  useEffect(\n    runOnPredicate(shaderInfo !== null, () => {\n      updateScreenBuffer({\n        vertices: webGlRef.createStaticDrawArrayBuffer(\n          screen.vertices.flat(),\n          screenBuffer.vertices,\n        ),\n      });\n    }),\n    [shaderInfo],\n  );\n\n  useEffect(\n    runOnPredicate(screenBuffer.vertices !== null, () => {\n      let shouldRender = true;\n\n      const renderScene = () => {\n        webGlRef.renderScene(({ gl, resolution }) => {\n          if (!shouldRender) {\n            return;\n          }\n\n          gl.bindBuffer(gl.ARRAY_BUFFER, screenBuffer.vertices);\n          gl.vertexAttribPointer(\n            shaderInfo.vertex.attributeLocations.vertexPosition,\n            3,\n            gl.FLOAT,\n            false,\n            0,\n            0,\n          );\n          gl.enableVertexAttribArray(\n            shaderInfo.vertex.attributeLocations.vertexPosition,\n          );\n\n          gl.useProgram(shaderProgram);\n\n          gl.uniform2fv(\n            shaderInfo.fragment.uniformLocations.resolution,\n            resolution,\n          );\n\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, screen.vertices.length);\n\n          requestAnimationFrame(renderScene);\n        });\n      };\n      requestAnimationFrame(renderScene);\n\n      return () => {\n        shouldRender = false;\n      };\n    }),\n    [screenBuffer],\n  );\n\n  return (\n    <div className=\"util text-center\" style={{ padding: \"1rem\" }}>\n      <canvas width=\"640\" height=\"480\" ref={canvasRef}>\n        Cannot run WebGL examples (not supported)\n      </canvas>\n      <pre className=\"util text-left\">Noise Granularity: 0.5 / 255.0</pre>\n    </div>\n  );\n};\n\nexport default wrapExample(DitheringExample);\n","import { Link } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\nimport BandingExample from \"../../components/advanced/color-banding-dithering/banding-example\";\nimport { bandingFragmentShaderSource } from \"../../components/advanced/color-banding-dithering/banding-example-shaders\";\nimport DitheringExample from \"../../components/advanced/color-banding-dithering/dithering-example\";\nimport { ditheringFragmentShaderSource } from \"../../components/advanced/color-banding-dithering/dithering-example-shaders\";\nimport Content from \"../../components/content\";\nimport GlslCodeHighlight from \"../../components/glsl-code-highlight\";\nimport Heading from \"../../components/heading\";\nimport Layout from \"../../components/layout\";\nimport PageChange from \"../../components/page-change\";\nimport Seo from \"../../components/seo\";\n\nconst ColorBandingDitheringPage = ({ location: { pathname } }) => (\n  <Layout>\n    <Seo\n      pathname={pathname}\n      title=\"Shader Advanced - Color Banding and Dithering\"\n      description=\"A look into what color banding is and how to mitigate it using dithering.\"\n      keywords={[\"shader\", \"advanced\", \"banding\", \"dithering\"]}\n    />\n    <Content>\n      <h1>Shader Advanced - Color Banding and Dithering</h1>\n      <p>\n        An issue that can occur when drawing gradients is something called color\n        banding. Let us look at a flat grayscale gradient going from black to\n        white.\n      </p>\n      <Heading type=\"h3\">Example - Color Banded Gradient</Heading>\n      <BandingExample />\n      <GlslCodeHighlight code={bandingFragmentShaderSource} type=\"Fragment\" />\n      <p>\n        The issue may not be very obvious at first, so here's a screenshot of a\n        portion of the image.\n      </p>\n      <div className=\"image util text-center\">\n        <StaticImage\n          src=\"../../images/advanced/banded.png\"\n          alt=\"Color Banding Screenshot Normal\"\n          style={{ maxWidth: \"65%\" }}\n        />\n      </div>\n      <p>We can modify the light levels to make the issue more obvious.</p>\n      <div className=\"image util text-center\">\n        <StaticImage\n          src=\"../../images/advanced/banded-exaggerated.png\"\n          alt=\"Color Banding Screenshot Exaggerated\"\n          style={{ maxWidth: \"65%\" }}\n        />\n      </div>\n      <p>\n        It appears that the image has bands of colors going across it. This\n        shouldn't occur since the decrease of light from the bottom to the top\n        should be gradual and smooth.\n      </p>\n      <p>\n        This issue is called color banding, and it is a problem because it makes\n        a gradient of colors appear to be \"chunky\" rather than smooth, which is\n        generally an undesirable effect.\n      </p>\n      <p>\n        We've previously discussed in the{\" \"}\n        <Link to=\"/advanced/color-2/\">color part 2 chapter</Link> that computers\n        are limited in what colors they have the ability to represent and show.\n      </p>\n      <p>\n        This issue occurs mainly because the colors that are required to show\n        the colors transitioning smoothly just do not exist among the range of\n        colors that can form an image and a monitor can show.\n      </p>\n      <p>\n        This means that if a computer wished to show a gradient of colors, there\n        will be bands of colors forming instead of a smooth transition, since a\n        computer cannot show the colors in between the two bands.\n      </p>\n      <p>\n        This issue can be illustrated in a simple way. Suppose we could only\n        represent colors using a 1-bit value. This would mean a computer could\n        only show two colors, black and white.\n      </p>\n      <div className=\"image util text-center\">\n        <StaticImage\n          src=\"../../images/advanced/actual-gradient.png\"\n          alt=\"Actual Gradient\"\n          style={{ maxWidth: \"65%\" }}\n        />\n        <br />\n        <a\n          href=\"https://www.xmple.com/wallpaper/black-white-gradient-linear--c2-000000-fffaf0-a-180-f-14-image/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Source\n        </a>\n      </div>\n      <p>\n        Now, suppose the computer had to render a gradient of colors, going from\n        white to black, as shown in the image above. Since the computer can only\n        show black and white, all the shades of gray in between cannot be\n        displayed by the computer.\n      </p>\n      <div className=\"image util text-center\">\n        <StaticImage\n          src=\"../../images/advanced/banded-gradient.png\"\n          alt=\"Banded Gradient\"\n          style={{ maxWidth: \"65%\" }}\n        />\n      </div>\n      <p>\n        This results in the computer showing a continues band of white, with a\n        sudden transition to a band of black. This is a case of color banding,\n        albeit an extreme one.\n      </p>\n      <Heading type=\"h2\">Dithering</Heading>\n      <p>\n        The solution to this issue of not being able to represent intermediate\n        colors is called dithering. The{\" \"}\n        <a\n          href=\"https://en.wikipedia.org/wiki/Dither\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Wikipedia article on dithering\n        </a>\n        , as well as the YouTube video by{\" \"}\n        <a\n          href=\"https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Computerphile\n        </a>{\" \"}\n        on{\" \"}\n        <a\n          href=\"https://youtu.be/IviNO7iICTM\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          ordered dithering\n        </a>{\" \"}\n        provide good explanations on what dithering is, but we'll also discuss\n        it here.\n      </p>\n      <p>\n        Dithering is the process of introducing noise into an image. By\n        introducing this noise in a certain way, you can overcome the\n        limitations of the detail that can be shown by the computer and screen.\n      </p>\n      <p>\n        Below is an example showing how introducing noise can improve the detail\n        of an image:\n      </p>\n      <div className=\"util text-center\">\n        <StaticImage\n          src=\"../../images/advanced/dithering-example.png\"\n          alt=\"Wikipedia Dithering Example\"\n          style={{ maxWidth: \"65%\" }}\n        />\n        <br />\n        <a\n          href=\"https://commons.wikimedia.org/wiki/File:Michelangelo%27s_David_-_Floyd-Steinberg.png\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Source\n        </a>\n      </div>\n      <p>\n        The image is just made from white and black pixels, but through the\n        introduction of noise into the image, shades of gray can be seen within\n        the image, although there is no actual gray present.\n      </p>\n      <p>\n        This is due to how colors interact with each other and affect how they\n        appear to us, as discussed in the{\" \"}\n        <Link to=\"/advanced/color-2/\">color part 2 chapter</Link>. This\n        interactions blends the noise of the colors together to appear as one\n        smooth band.\n      </p>\n      <p>\n        The noise does introduce a grainy effect, but the added detail in color\n        is a high benefit, and in multiple cases this added detail offsets the\n        issue of grain in the image.\n      </p>\n      <p>\n        The noise can be a lot harder to spot in certain issues where colors\n        that form bands are a lot closer to each other in the color spectrum,\n        like in our example of color banding above.\n      </p>\n      <p>\n        If we apply a noise to our image, it should cause dithering and allow\n        for the colors to blend together.\n      </p>\n      <p>\n        Since the colors forming the bands are already pretty close in the color\n        spectrum, the grainy effect introduced by dithering should be very hard\n        to spot, making it ideal to fix the banding issue.\n      </p>\n      <Heading type=\"h3\">Example - Dithered Gradient</Heading>\n      <DitheringExample />\n      <p>Below is a zoomed in part of the new dithered image.</p>\n      <div className=\"util text-center\">\n        <StaticImage\n          src=\"../../images/advanced/noised.png\"\n          alt=\"Dithering Screenshot Normal\"\n          style={{ maxWidth: \"65%\" }}\n        />\n      </div>\n      <p>We can modify the light levels to see the introduced noise.</p>\n      <div className=\"util text-center\">\n        <StaticImage\n          src=\"../../images/advanced/noised-exaggerated.png\"\n          alt=\"Dithering Screenshot Exaggerated\"\n          style={{ maxWidth: \"65%\" }}\n        />\n      </div>\n      <p>\n        While with the color banding screenshots, the banding was noticeable\n        even in the non-altered image (unless your display isn't calibrated\n        well), with the dithered original screenshot there is no appearance of\n        banding or even noise in the image.\n      </p>\n      <p>\n        The noise is only visible when modifying the light levels, but since the\n        randomness spreads the colors of the bands, they easily blend together\n        and look smooth to your eyes.\n      </p>\n      <GlslCodeHighlight code={ditheringFragmentShaderSource} type=\"Fragment\" />\n      <p>\n        A random number is generated for the fragment which needs to be noised.\n        The granularity for the noise (stored in the constant{\" \"}\n        <code>NOISE_GRANULARITY</code>) is set to a very small number (\n        <code>0.5/255.0</code>) to ensure that any shift in color due to the\n        noise would be minimal.\n      </p>\n      <p>\n        A random value was linearly interpolated using the GLSL function{\" \"}\n        <code>mix</code> within this noise granularity range using the generated\n        random number for the fragment and added to the fragment color,\n        resulting in the color of the fragment being slightly modified.\n      </p>\n      <p>\n        Since the shift in color is random for every fragment, it results in in\n        unordered/random dithering due to the randomness of the generated noise.\n      </p>\n      <p>\n        This process removes the appearence of color banding, as seen in the\n        dithering screenshots, and allows for color gradients to appear much\n        smoother than they really are.\n      </p>\n      <p>\n        To learn more about dithering in general and various dithering\n        techniques out there, check out the{\" \"}\n        <a\n          href=\"https://youtu.be/wS0Gck00nDw\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          HTTP 203 episode discussing it\n        </a>\n        .\n      </p>\n      <Heading type=\"h2\">Summary</Heading>\n      <ul>\n        <li>\n          Color banding is an issue that can occur when the computer cannot\n          simulate a transition between two colors since it cannot represent the\n          intermediate colors between the two.\n        </li>\n        <li>\n          Dithering is a process of adding noise to an image to remove color\n          pattern issues such as color banding. Dithering is of two types -\n          ordered dithering, and unordered dithering.\n        </li>\n      </ul>\n    </Content>\n    <PageChange\n      previous=\"/advanced/branching/\"\n      next=\"/advanced/transparency/\"\n    />\n  </Layout>\n);\n\nexport default ColorBandingDitheringPage;\n"],"names":["bandingVertexShaderSource","vertexShader","bandingFragmentShaderSource","shaderProgramInfo","vertex","attributeLocations","vertexPosition","uniformLocations","fragment","resolution","screenModelPosition","mat4","wrapExample","BandingExample","screen","vertices","webGlRef","updateWebGlRef","useState","shaderProgram","updateShaderProgram","shaderInfo","updateShaderInfo","screenBuffer","updateScreenBuffer","canvasRef","useRef","useEffect","current","newWebGlRef","WebGlWrapper","destroy","runOnPredicate","createShaderProgram","getDataLocations","createStaticDrawArrayBuffer","flat","shouldRender","renderScene","_ref","gl","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","enableVertexAttribArray","useProgram","uniform2fv","drawArrays","TRIANGLE_STRIP","length","requestAnimationFrame","React","className","style","padding","width","height","ref","ditheringVertexShaderSource","ditheringFragmentShaderSource","DitheringExample","location","pathname","Layout","Seo","title","description","keywords","Content","Heading","type","GlslCodeHighlight","code","StaticImage","src","alt","maxWidth","__imageData","require","Link","to","href","target","rel","PageChange","previous","next"],"sourceRoot":""}